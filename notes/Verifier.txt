To verify jump targets:
	Have a sorted list of jump targets per function in the object file. (It need not be checked to be sorted)
	Have a pointer into this list.
	When decoding an address, see if it matches the target of the pointer. If so, bump the pointer.
	When the last instruction is decoded, ensure that the pointer is at the end.
	When a jmp instruction is found. Do a binary search into the list of jump targets.

On the decoding DFA, can we store output words only on unique state transitions?
	Store a bit in the target state which indicates if there's a word which changes the output register?

Test commands:
	cargo run --release --bin rustgen > output.txt
	cargo run --release --bin verify -- -f ../build/user/hello > out.txt
	./target/release/verify -f ../build/user/hello > out.txt

To find a virtual register slot for a stack variable:
	Require all stack accesses to be aligned with their access size
	Divide the offset by 8
	SSE can cause multiple slots to be clobbered, needs special handling

How to get address of globals?
	lea _, [rip + _] gives the global value (which may change during execution, so it can't be simply subtracted)